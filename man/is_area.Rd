% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/i.R
\name{is_area}
\alias{is_area}
\alias{is_area_pixel}
\alias{is_area_si}
\title{Test area input}
\usage{
is_area(input, error = FALSE)

is_area_pixel(input, error = FALSE)

is_area_si(input, error = FALSE)
}
\arguments{
\item{input}{Character vector. Elements must match the requirements of
the \code{SPATA2} area framework. See details for more information.}
}
\value{
Logical vector of the same length as input and/or an error if \code{verbose}
is \code{TRUE}.
}
\description{
Tests if input refers to an area using international area
units according to the \code{SPATA2} area framework.
}
\details{
Several functions in \code{SPATA2} have arguments that take \emph{area input}.
To specifically refer to an area the unit must be specified. There are
two ways to create valid input for these arguments.

\strong{1. Suffixed with the unit:}

Although inherently of numeric meaning, values can be specified as characters
with a suffix that specifies the unit: \verb{arg_input <- c(*'40mm2', '342.2mm2', 80mm2'*)}.
Valid suffixes can be obtained using the function \code{validUnitsOfArea()}.

\strong{2. As vectors of class \code{unit}:}

Behind the scenes \code{SPATA2} works with the \code{units}-package. Character input
is converted into vectors of class \code{units}. Therefore, input can be directly
provided this way: \verb{arg_input <- units::set_unit(x = c(20.2, 30), value = "mm2)}
}
\examples{

library(SPATA2)

##### provide input as character vectors

# will return TRUE

is_area(input = c('200mm2', '0.4cm2'))

# will return FALSE

is_area(input = c(200, 0.4)) # no unit

is_area(input = c('200 m2')) # space between value and unit

# will return TRUE

area_values <- c(200, 400)

area_values <- as_area(area_values, unit = "mm2")

is_area(input = area_values)

###### use units package

library(units)

area_values2 <- set_units(x = c(200, 300), value = "mm2")

is_area(area_values2)


}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/g.R
\name{ggpLayerAxesSI}
\alias{ggpLayerAxesSI}
\title{Display axes with European units of length}
\usage{
ggpLayerAxesSI(
  object,
  unit = getSpatialMethod(object)@unit,
  which = c("x", "y"),
  frame_by = "coords",
  breaks_x = NULL,
  breaks_y = NULL,
  add_labs = TRUE,
  round = 2
)
}
\arguments{
\item{object}{An object of class \code{SPATA2}.}

\item{unit}{The desired unit. Defaults to the unit
in which the original size of the image of the spatial method is
provided. Obtain valid input options with \code{validUnitsOfLengthSI()}.}

\item{which}{One or two of \emph{'x'} and \emph{'y'}. Specifies
for which axes the transformation is performed. Defaults to both.}

\item{frame_by}{Either \emph{'coords'} or \emph{'image'} or \code{NULL}.
If specified, sets the plot frame accordingly.}

\item{breaks_x, breaks_y}{Vector of distance inputs. Can be pixel or European
units of lengths. If European unit of lengths, input is transformed to pixels as
the plot is plotted with pixel-based coordinates. If \code{NULL}, is set
automatically to five breaks equally distributed along the axis.}

\item{add_labs}{Logical. If \code{TRUE}, adds informative x- and y-labs to
the plot.}

\item{round}{Numeric value or \code{FALSE}. If numeric, given to \code{digits}
of \code{base::round()}. Rounds transformed values before they are returned.}
}
\value{
\code{ggpLayer*()}-functions return lists of \code{ggproto} objects
that can be added to ggplots via the \code{+} operator. In most of the cases
they are supposed to be added to plots created with the \code{plotSurface*()}
family.
}
\description{
Performs necessary transformations to display axes of
surface plots with European units of length.
}
\details{
Several functions in \code{SPATA2} have arguments that take \emph{distance input}.
To specifically refer to a distance the unit must be specified. There are
three ways to create valid input for these arguments.

\strong{1. In pixel:}

There are two valid input options to specify the distance in pixel:

\itemize{
\item{numeric:}{ Single numeric values, e.g. \code{arg_input <- c(2, 3.554, 69, 100.67)}. If no unit
is specified the input will be interpreted as pixels.}
\item{character:}{ Suffixed with \emph{'px'}, e.g. \code{arg_input <- c('2px', '3.554px', '69px', '100.67px')}}
}

Note: The unit pixel (px) is used for distances as well as for areas. If pixel
refers to a distance the pixel side length is meant. If pixel refers to an area the
number of pixels is meant.

\strong{2. According to the Systeme international d`unites (SI):}

Specifying distances in SI units e.g. \code{arg_input <- c('2mm', '4mm')} etc.
requires the input to be a character as the unit must be provided as suffix.
Between the numeric value and the unit must be no empty space! Valid suffixes
can be obtained using the function \code{validUnitsOfLengthSI()}.

\strong{3. As vectors of class \code{unit}:}

Behind the scenes \code{SPATA2} works with the \code{units} package. Input
is converted into vectors of class \code{units}. Therefore, input can be directly
provided this way: \code{arg_input <- units::set_unit(x = c(2,4), value = 'mm')}
Note that \emph{pixel} is not a valid unit in the \code{units} package. If you want
to specify the input in pixel you have to use input option 1. In pixel.
}
